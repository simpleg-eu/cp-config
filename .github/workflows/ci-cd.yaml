name: CI/CD

on:
  push:
    branches:
      - main

env:
  SECRETS_MANAGER_ACCESS_TOKEN: ${{ secrets.SECRETS_MANAGER_ACCESS_TOKEN }}
  ARTIFACT_NAME: "le_baguette"
  VERSION: "${{ vars.MAJOR_VERSION }}.${{ vars.MINOR_VERSION }}.${{ github.run_number }}"

jobs:
  changes:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      src: ${{ steps.filter.outputs.src }}
      test: ${{ steps.filter.outputs.test }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            src:
              - 'src/**'
              - 'Cargo.toml'
              - '.github/workflows/ci-cd.yaml'
              - 'Dockerfile'
            test:
              - 'test_data/**'
              - 'tests/**'
              - '.github/workflows/ci-only.yaml'
  ci:
    needs: changes
    runs-on: ubuntu-latest

    timeout-minutes: 10

    if: ${{ needs.changes.outputs.src == 'true' || needs.changes.outputs.test == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Replace placeholder version
        run: |
          sed -i 's/5123.0.0/${{ env.VERSION }}/' ./Cargo.toml
      - name: Run tests
        run: |
          mkdir bin
          cd bin
          curl -LO https://github.com/bitwarden/sdk/releases/download/bws-v0.3.0/bws-x86_64-unknown-linux-gnu-0.3.0.zip
          unzip bws-x86_64-unknown-linux-gnu-0.3.0.zip
          chmod +x bws
          curl -LO https://github.com/microconfig/microconfig/releases/download/v4.9.2/microconfig-linux.zip
          unzip microconfig-linux.zip
          chmod +x microconfig
          export PATH=$PATH:$PWD
          cd ../
          cargo test --all-features
      - name: Build
        run: |
          cargo build --release
          mv ./target/release/cp-config ./
          zip app.zip cp-config ./config/*
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ./app.zip
  cd:
    needs: ci
    if: ${{ needs.changes.outputs.src == 'true' && github.event_name == 'push' && github.ref == 'refs/heads/main' }}

    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          sparse-checkout: 'Dockerfile'
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ./
      - name: Unzip artifact
        run: |
          unzip -o app.zip
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          tag_name: v${{ env.VERSION }}
          release_name: v${{ env.VERSION }}
          draft: false
          prerelease: false
      - name: Upload release asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./app.zip
          asset_name: app.zip
          asset_content_type: application/zip
      - name: Build Docker image
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t gabriel0simpleg/cp-config:${{ env.VERSION }} .
          docker tag gabriel0simpleg/cp-config:${{ env.VERSION }} gabriel0simpleg/cp-config:latest
          docker push gabriel0simpleg/cp-config:${{ env.VERSION }}
          docker push gabriel0simpleg/cp-config:latest
  clean:
    if: success() || failure()

    needs: cd
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Remove artifact
        uses: geekyeggo/delete-artifact@v2
        with:
          name: ${{ env.ARTIFACT_NAME }}